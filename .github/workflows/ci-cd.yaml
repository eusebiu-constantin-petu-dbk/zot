on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published
name: CI/CD
jobs:
  conformance:
    if: github.event_name == "push" || github.event_name == "pull_request"
    name: Conformance
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: setup docker
      uses: docker-practice/actions-setup-docker@0.0.1
      with: 
        docker_version: 18.09
        docker_channel: stable
    - name: checkout this PR 
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: zot
        repository: anuvu/zot
    - name: start zot server
      run: |
          cd ./zot
          IP=`hostname -I | awk '{print $1}'`
          echo "ZOT_URL=http://${IP}:5000" >> $GITHUB_ENV
          ZOT_REF="local-zot:v$(date +%Y%m%d%H%M%S)"
          docker build -f ./Dockerfile-conformance -t "${ZOT_REF}" .
          docker run --rm -p 5000:5000 -v "$(pwd)":/go/src/github.com/anuvu/zot -idt "${ZOT_REF}"
    - name: Run OCI Distribution Spec conformance tests
      uses: opencontainers/distribution-spec@main
      env:
        OCI_ROOT_URL: ${{ env.ZOT_URL }}
        OCI_NAMESPACE: oci-conformance/distribution-test
        OCI_TEST_PULL: 1
        OCI_TEST_PUSH: 1
        OCI_TEST_CONTENT_DISCOVERY: 1
        OCI_TEST_CONTENT_MANGEMENT: 1
        OCI_HIDE_SKIPPED_WORKFLOWS: 1
    - run: mkdir -p .out/ && mv {report.html,junit.xml} .out/
      if: always()
      #run: docker run --rm -v $(pwd)/results:/results -w /results -e OCI_ROOT_URL=${{ env.OCI_ROOT_URL }} -e OCI_NAMESPACE="anuvu/zot" -e OCI_TEST_PULL=1 -e OCI_TEST_PUSH=1 -e OCI_TEST_CONTENT_DISCOVERY=1 -e OCI_TEST_CONTENT_MANAGEMENT=1 -e OCI_HIDE_SKIPPED_WORKFLOWS=0 -e OCI_DEBUG="true" ghcr.io/opencontainers/distribution-spec/conformance:db4cc68
    - name: Upload test results zip as build artifact
      uses: actions/upload-artifact@v1
      with:
        name: oci-test-results-${{ github.sha }}
        path: .out/
      if: github.event == 'push'

  build-test:
    name: Build and test ZOT
    runs-on: ubuntu-latest
    steps:
      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x

      - name: Check out source code
        uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          cd $GITHUB_WORKSPACE
          go get -u github.com/swaggo/swag/cmd/swag
          go mod download
          sudo apt-get update
          sudo apt-get install rpm
          sudo apt install snapd
          sudo snap install skopeo --edge --devmode

      - name: Run build and test
        run: |
          cd $GITHUB_WORKSPACE && make

      - name: Upload code coverage
        uses: codecov/codecov-action@v1  
      
      - if: github.event_name == 'release' && github.event.action == 'published'
        name: Publish artifacts on releases
        uses: Roang-zero1/github-upload-release-artifacts-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: bin/zot*

  push-image:
    if: github.event_name == "release" && github.event_name == "published"
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
